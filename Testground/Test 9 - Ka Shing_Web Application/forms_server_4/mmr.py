# === Imports === 
import re
from exceptions import UnsupportedNameFormatException, ParameterMismatchException

# === MetaMotionR File ===
class MMRFile():
    """A class to hold each MetaMotionR sensor file.    

    Attributes:
    -----------
    session_name (str)
        The name of the session as given by the user when setting up the MetaBase app.
    session_metadata (str)
        The session metadata as generated by the MMR sennsor.
    session_key (str)
        #session_name# + "_" + #session_metadata#
    sensor_mode (str)
        The mode of the sensor associated with the file. This will be in lowercase.
    firmware_version (str)
        The version of the sensor firmware when the measurements were made.
    extension (str)
        The extension of the file.
    file (FileStorage)
        The FileStorage object associated with the MMR file. 
    """
    def __init__(self, fs):
        """From a given FileStorage object, extracts the following variables:
         - session_name
         - session_metadata
         - session_key
         - sensor_mode
         - firmware_version
         - extension
         - file

        Parameters
        ----------
        fs (FileStorage)
        """
        filename = fs.filename

        # Get regex and match
        regex = "(.*)_.*_(\d+-\d+-\d+T\d+\.\d+\.\d+\.\d+_\w+)_([\w\s]+)_(.*)(\..*)"

        match = re.search(regex, filename)

        # Check if match is None
        if match is None: 
            raise UnsupportedNameFormatException("The filename does not match the given regex.")
        else:
            # Collect regex groups
            self.session_name = match.group(1)
            self.session_metadata = match.group(2)
            self.session_key = '_'.join([self.session_name, self.session_metadata])
            self.sensor_mode = match.group(3).lower()
            self.firmware_version = match.group(4)
            self.extension = match.group(5)
            # self.file = fs
            self.file = fs.read().decode('utf-8')


# === MetaMotionR Session ===
class MMRSession():
    """A class to group MMRFile objects measured in the same session.

    Attributes:
    -----------
    session_name (str)
        The name of the session as given by the user when setting up the MetaBase app.
    session_metadata (str)
        The session metadata as generated by the MMR sennsor.
    session_key (str)
        #session_name# + "_" + #session_metadata#
    firmware_version (str)
        The version of the sensor firmware when the measurements were made.
    sensor_modes ({})
        The sensor-modes. 
        Key: The sensor mode of the desired MMR file, e.g. "accelerometer".
        Value: The MMRFile object.
    valid_session (boolean)
        Indicates whether the current session is valid based on the required sensor modes.
    """
    def __init__(self, mmrfile):
        """Extracts the following parameters from the given MMRFile:
         - session_name
         - session_metadata
         - session_key
         - firmware_version

        Then, adds the MMRFile object to a dictionary using the add_mmr_file() function. 

        Parameters
        ----------
        mmrfile (MMRFile)
        """
        self.session_name = mmrfile.session_name
        self.session_metadata = mmrfile.session_metadata
        self.session_key = mmrfile.session_key
        self.firmware_version = mmrfile.firmware_version
        self.sensor_modes = {}

        self.add_mmr_file(mmrfile) 

    
    def add_mmr_file(self, mmrfile):
        """Adds an MMRFile object to the session as a key-value pair in a dictionary.
        
        The key is the MMRFile's sensor_mode. The value is the MMRFile object. 

        Parameters
        ----------
        mmrfile (MMRFile)
        """
        self.sensor_modes[mmrfile.sensor_mode] = mmrfile


    def validate_sensor_modes(self, modes):
        """Checks that the current session contains all the required sensor modes.

        Parameters
        ----------
        modes (str[])
        """
        mode_check = list(map(lambda x: x.lower() in self.sensor_modes.keys(), modes))
        self.valid_session = all(mode_check)


    def set_dataframe(self, df):
        """Adds a dataframe to the session displaying the metrics.

        Parameters
        ----------
        df (DataFrame())
        """
        self.df = df


class MMRSessionParam():
    """A class to handle the parameter request HTML for each MMRSession object.

    Attributes
    ----------
    mmr_session (MMRSession)
        The MMRSession object associated with the MMRSessionParam.
    session_key (str)
        The session key of the MMRSession object.
    index (int)
        The index of the MMRSessionParam. 
        To be used to associate the test ID with the index of the corresponding MMRSession object.
    parameters ({})
        Array of dictionaries
        Key-value pairs:
            id (str): The test id
            accepted_values (str[]): The list of accepted values.
            value (str): The user-given value from the HTML input.
            status (boolean): Whether the user-given value is within accepted_values. 
        
    """
    def __init__(self, mmr_session, index, parameters):
        """Instantiates the MMRSessionParam object by associating it with an MMRSession.
        Also initialises the desired parameters from each MMRSession and their legal values.
        """
        self.mmr_session = mmr_session
        self.session_name = mmr_session.session_name 
        self.session_key = mmr_session.session_key
        self.descriptions = mmr_session.sensor_modes.keys()
        self.index = index
        self.parameters = []
        self.valid_parameters = False
        self.saved = None
        
        for p in parameters:
            match = ""

            for value in p["values"]:
                if value in [string.strip() for string in self.session_name.split('-')]:
                    match = value
                    
                    break

            self.parameters.append({
                "id": p["id"],
                "accepted_values": p["values"],
                "value": match,
                "status": None
            })

    
class MMRSessionParamList():
    """A class to manage the entire list of MMRSessionParam objects. 
    """
    def __init__(self, parameters):
        """Instantiates the MMRSessionParamList and sets the number of requested parameters.
        """
        self.headers = []

        for p in parameters:
            self.headers.append({
                "id": p["id"],
                "desc": p["description"]
            })

        self.session_params = []

    
    def add_session_param(self, mmr_param):
        """Adds a MMRSessionParam to the current list.
        """
        if len(self.headers) == len(mmr_param.parameters):
            self.session_params.append(mmr_param)
        else:
            raise ParameterMismatchException("The number of requested parameters of the current MMRSessionParam object does not match the requested number of parameters of this MMRSessionParamList.")
    

    def validate_inputs(self, form):
        """Validates the user-set inputs based on the given form data. 
        """
        for k, v in form.items():
            key = k.rsplit('-', 1)
            
            test_id = key[0]
            index = int(key[1])
            value = v

            param = self.session_params[index] 
            
            for p in param.parameters:
                if p["id"] == test_id: 

                    p["value"] = value

                    if value in p["accepted_values"]:
                        p["status"] = True
                    else:
                        p["status"] = False 

                    break 

        for param in self.session_params:
            param.valid_parameters = all(p["status"] for p in param.parameters)

        params_to_return = list(filter(lambda x: x.valid_parameters == True and x.saved is not True, self.session_params))

        for param in params_to_return:
            param.saved = True 

        return params_to_return